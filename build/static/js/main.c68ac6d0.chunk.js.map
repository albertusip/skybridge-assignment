{"version":3,"sources":["components/Navbar/index.js","components/Banner/index.js","components/FriendCards/index.js","components/UserList/index.js","App.js","serviceWorker.js","index.js"],"names":["memo","useState","scrollY","setScrollY","color","backgroundColor","padding","transition","navbarOptions","setNavbarOptions","scroll","useCallback","window","pageYOffset","useEffect","addEventListener","removeEventListener","Navbar","sticky","variant","style","className","Brand","href","onSubmit","focused","setFocused","name","status","guest","setGuest","Jumbotron","onClick","value","onChange","event","target","id","placeholder","Button","disabled","type","isLoading","setIsLoading","friends","setFriends","fetchData","a","axios","post","result","data","console","error","Row","Col","xs","Spinner","animation","map","item","index","key","sm","md","Card","Figure","Image","width","height","src","document","url","roundedCircle","vip","age","fullname","users","setUsers","pageCount","currentPage","paginate","page","search","tableOptions","setTableOptions","selected","last_page","current_page","InputGroup","FormControl","aria-label","aria-describedby","Form","Group","Control","pagination","as","Table","striped","bordered","hover","birthplace","s","replace","d","Date","getDate","getMonth","getFullYear","formatDate","birthdate","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","initialPage","containerClassName","subContainerClassName","activeClassName","App","guestValue","setGuestValue","Container","lg","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c68ac6d0.chunk.js","sourcesContent":["import React, { memo, useState, useEffect, useCallback } from 'react';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nconst NavbarApp = () => {\r\n    const [scrollY, setScrollY] = useState(0);\r\n    const [navbarOptions, setNavbarOptions] = useState({\r\n        color: '#aaa',\r\n        backgroundColor: '#fff',\r\n        padding: '40px 40px 0px',\r\n        transition: '0.2s'\r\n    });\r\n\r\n    const scroll = useCallback(() => {\r\n        setScrollY(window.pageYOffset);\r\n        if (window.pageYOffset < 2)\r\n            setNavbarOptions({\r\n                ...navbarOptions,\r\n                backgroundColor: '#fff',\r\n                padding: '40px 40px 0px',\r\n                color: '#aaa'\r\n            });\r\n        else\r\n            setNavbarOptions({\r\n                ...navbarOptions,\r\n                backgroundColor: '#5c41ad',\r\n                padding: '',\r\n                color: 'hsla(0,0%,100%,.6)'\r\n            });\r\n    }, [navbarOptions])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", scroll);\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", scroll);\r\n        };\r\n    }, [scrollY, scroll]);\r\n\r\n    return (\r\n        <Navbar\r\n            sticky=\"top\"\r\n            variant=\"light\"\r\n            style={navbarOptions}\r\n            className=\"justify-content-center justify-content-md-start\"\r\n        >\r\n            <Navbar.Brand\r\n                style={{color: navbarOptions.color}}\r\n                className=\"text-uppercase font-weight-900 mr-0\"\r\n                href=\"https://hangman.jpcc.my.id/\"\r\n            >\r\n                skybridge test\r\n            </Navbar.Brand>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default memo(NavbarApp);","import React, { memo, useState } from 'react';\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport '../../style/Banner.css';\r\n\r\nconst BannerApp = ({onSubmit}) => {\r\n    const [focused, setFocused] = useState(false);\r\n    const [guest, setGuest] = useState({\r\n        name: '',\r\n        status: false\r\n    });\r\n\r\n    const changeFocused = (val) => {\r\n        setFocused(val);\r\n    }\r\n\r\n    const handleInput = () => (event) => {\r\n        setGuest({ ...guest, name: event.target.value });\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        onSubmit(guest.name);\r\n        setGuest({ ...guest, status: true});\r\n    }\r\n\r\n    return (\r\n        <Jumbotron className={`banner text-center mb-0 ${focused ? 'focused' : ''}`}>\r\n            {\r\n                guest.status ? \r\n                    <div className=\"w-100\">\r\n                        <h2 className=\"fadein-animation-h2 display-2 font-weight-400 text-white d-block\">\r\n                            Hi, {guest.name}!\r\n                        </h2>\r\n                        <h5 className=\"fadein-animation-h5 text-uppercase\">\r\n                            Do You Wanna Build a Snowman?\r\n                        </h5>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <h2\r\n                            className=\"banner-question display-2 font-weight-400 text-white\"\r\n                            onClick={() => setFocused(false)}\r\n                        >\r\n                            Hi, What is your name?\r\n                        </h2>\r\n                        <div\r\n                            className=\"d-inline-block\"\r\n                            onClick={() => changeFocused(true)}\r\n                        >\r\n                            <input\r\n                                value={guest.name}\r\n                                onChange={handleInput()}\r\n                                className=\"w-100\"\r\n                                id=\"formGuest\"\r\n                                placeholder=\"Type your name here\"\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <Button \r\n                                disabled={!guest.name}\r\n                                onClick={handleSubmit}\r\n                                type=\"submit\"\r\n                                className=\"mt-3 btn btn-next\"\r\n                            >\r\n                                {!guest.name ? 'Name cannot be empty' : 'Next'}\r\n                            </Button>\r\n                        </div> \r\n                    </div>\r\n            }\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default memo(BannerApp);","import React, { memo, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Card from 'react-bootstrap/Card';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport '../../style/FriendCards.css';\r\n\r\nconst FriendCardsApp = (name) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [friends, setFriends] = useState([]);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            const result = await axios.post(' https://api-hangman.jpcc.my.id/api/getfriends', {\r\n                name: name\r\n            });\r\n            setFriends(result.data);\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [name])\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [fetchData]);\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"text-center\">\r\n                <Col xs={12}>\r\n                    <h5 className=\"section-title text-left mt-3 mb-0\">\r\n                        Here you can call me FRIENDS\r\n                    </h5>\r\n                </Col>\r\n                {   \r\n                    isLoading ?\r\n                        <div className=\"w-100 text-center my-5\">\r\n                            <Spinner animation=\"grow\" />\r\n                        </div>\r\n                        :\r\n                        friends.map((item, index) =>\r\n                            <Col\r\n                                key={`friend-${index}`}\r\n                                xs={12}\r\n                                sm={6}\r\n                                md={12}\r\n                                className=\"my-3\"\r\n                            >\r\n                                <Card className=\"friend-card bg-light text-center py-3 px-2\">\r\n                                    <Figure className=\"mb-0\">\r\n                                        <Figure.Image\r\n                                            width=\"100%\"\r\n                                            height=\"auto\"\r\n                                            src={item.document.url}\r\n                                            className=\"wh-fix-200 bg-white border mb-0 img-fluid\"\r\n                                            roundedCircle\r\n                                        />\r\n\r\n                                    </Figure>\r\n                                    {\r\n                                        item.vip ?\r\n                                        <div className=\"vip-badges\">\r\n                                            <span>VIP</span>\r\n                                        </div> : null\r\n                                        \r\n                                    }\r\n                                    <div className=\"years-old-badges\">\r\n                                        <span>{ item.age } y/o</span>\r\n                                    </div>\r\n                                    <div className=\"friend-name font-weight-500 mt-2\">\r\n                                        Hi, my name is { item.name }\r\n                                    </div>\r\n                                    <div className=\"friend-fullname\">\r\n                                        {item.fullname}\r\n                                    </div>\r\n                                </Card>\r\n                            </Col>\r\n                        )\r\n                }\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(FriendCardsApp);","import React, { memo, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nimport Table from 'react-bootstrap/Table';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nimport '../../style/UserList.css';\r\n\r\nconst formatDate = (s) => {\r\n\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'Octtober', 'November', 'December'];\r\n    s = s.replace(/-/g, '/');\r\n    const d = new Date(s);\r\n\r\n    return d.getDate() + ' ' + months[d.getMonth()] + ' ' + d.getFullYear();\r\n}\r\n\r\nconst UserListApp = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [users, setUsers] = useState({});\r\n    const [tableOptions, setTableOptions] = useState({\r\n        pageCount: 0,\r\n        currentPage: 0,\r\n        paginate: 10,\r\n        page: 1,\r\n        search: ''\r\n    });\r\n\r\n    const fetchData = useCallback(async (page = {}) => {\r\n        try {\r\n            setIsLoading(true);\r\n            const result = await axios.post(' https://api-hangman.jpcc.my.id/api/user/filtered', {\r\n                paginate: tableOptions.paginate,\r\n                page: (page.selected + 1) || 1 ,\r\n                search: tableOptions.search\r\n            });\r\n            setUsers(result.data);\r\n            setTableOptions({ ...tableOptions, pageCount: result.last_page, currentPage: result.current_page});\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [tableOptions.pageCount, tableOptions.currentPage, tableOptions.paginate, tableOptions.search])\r\n\r\n    const handleSearchInput = () => (event) => {\r\n        setTableOptions({ ...tableOptions, search: event.target.value });\r\n    }\r\n\r\n    const handleRowInput = () => (event) => {\r\n        setTableOptions({ ...tableOptions, paginate: event.target.value });\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [tableOptions.search, tableOptions.paginate, fetchData]);\r\n\r\n    return (\r\n        <>\r\n            <Row >\r\n                <Col xs={12}>\r\n                    <h5 className=\"section-title text-left mt-3 mb-0\">\r\n                        List of All Users\r\n                    </h5>\r\n                    <br></br>\r\n                </Col>\r\n                <Col\r\n                    xs={12}\r\n                    className=\"my-3\"\r\n                >\r\n                    <Row>\r\n                        <Col\r\n                            xs={12}\r\n                            sm={5}\r\n                            className=\"my-1 my-sm-0\"\r\n                        >\r\n                            <InputGroup className=\"mb-3\">\r\n                                <FormControl\r\n                                    value={tableOptions.search}\r\n                                    onChange={handleSearchInput()}\r\n                                    placeholder=\"Search\"\r\n                                    aria-label=\"Search\"\r\n                                    aria-describedby=\"search\"\r\n                                />\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col\r\n                            xs={12}\r\n                            sm={7}\r\n                            className=\"text-right my-1 my-sm-0\"\r\n                        >\r\n                            <div className=\"d-inline-block mr-2\">\r\n                                <small>Row per page:</small>\r\n                            </div>\r\n                            <Form.Group className=\"d-inline-block\">\r\n                                <Form.Control\r\n                                    value={tableOptions.pagination}\r\n                                    onChange={handleRowInput()}\r\n                                    disabled={isLoading}\r\n                                    as=\"select\"\r\n                                    placeholder=\"Search User\">\r\n                                    <option value=\"10\">10</option>\r\n                                    <option value=\"25\">25</option>\r\n                                    <option value=\"50\">50</option>\r\n                                    <option value=\"100\">100</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    {\r\n                        isLoading ? \r\n                            <div className=\"w-100 text-center my-5\">\r\n                                <Spinner animation=\"grow\" />\r\n                            </div>\r\n                            :\r\n                            <Table striped bordered hover>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>#</th>\r\n                                        <th>Name</th>\r\n                                        <th>Birthday</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        users.data && users.data.map((item, index) =>\r\n                                            <tr key={`user-${index}`}>\r\n                                                <td>{index + 1}</td>\r\n                                                <td>{item.fullname}</td>\r\n                                                <td>{`${item.birthplace}, ${formatDate(item.birthdate)}`}</td>\r\n                                            </tr>\r\n                                        )\r\n                                    }\r\n                                </tbody>\r\n                            </Table>\r\n                    }\r\n                    <div className=\"d-flex\">\r\n                        <ReactPaginate\r\n                            previousLabel=\"Prev\"\r\n                            nextLabel=\"Next\"\r\n                            breakLabel=\"...\"\r\n                            breakClassName=\"break-me\"\r\n                            pageCount={tableOptions.pageCount}\r\n                            marginPagesDisplayed={2}\r\n                            pageRangeDisplayed={2}\r\n                            onPageChange={fetchData}\r\n                            initialPage={tableOptions.currentPage}\r\n                            containerClassName=\"pagination\"\r\n                            subContainerClassName=\"pages pagination\"\r\n                            activeClassName=\"active\" />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(UserListApp);","import React, {useState} from 'react';\n\nimport Navbar from './components/Navbar';\nimport Banner from './components/Banner';\nimport FriendCards from './components/FriendCards';\nimport UserList from './components/UserList';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport './App.css';\n\nfunction App() {\n    const [guestValue, setGuestValue] = useState();\n    const handleSubmit = (value) => {\n        setGuestValue(value);\n    };\n\n    return (\n        <>\n            <Navbar />\n            <Banner\n                onSubmit={handleSubmit}\n            />\n            {\n                guestValue ? \n                    <Container>\n                        <Row>\n                            <Col\n                                xs={12}\n                                md={4}\n                                lg={3}\n                            >\n                                <FriendCards\n                                    guestValue={guestValue}\n                                />\n                            </Col>\n                            <Col\n                                xs={12}\n                                md={8}\n                                lg={9}\n                            >\n                                <UserList\n                                    guestValue={guestValue}\n                                />\n                            </Col>\n                        </Row>\n                    </Container>\n                    : null\n            }\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}